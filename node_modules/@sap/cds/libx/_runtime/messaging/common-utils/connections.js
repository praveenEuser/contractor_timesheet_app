const { expBkfRnd: waitingTime } = require('../../common/utils/waitingTime')

const _rmHandlers = client => {
  client.removeAllListeners('connected')
  client.removeAllListeners('error')
  client.removeAllListeners('disconnected')
}

const _connectUntilConnected = (client, LOG, x) => {
  if (client._reconnecting) return
  client._reconnecting = true

  const _waitingTime = waitingTime(x)
  setTimeout(() => {
    connect(client, LOG, true)
      .then(() => {
        client._reconnecting = false
        LOG._warn && LOG.warn('Reconnected to Enterprise Messaging Client')
      })
      .catch(e => {
        _rmHandlers(client)
        LOG.error(e)

        LOG._warn &&
          LOG.warn(
            `Connection to Enterprise Messaging Client lost: Reconnecting in ${Math.round(_waitingTime / 1000)} s`
          )
        client._reconnecting = false
        _connectUntilConnected(client, LOG, x + 1)
      })
  }, _waitingTime)
}

const connect = (client, LOG, keepAlive) => {
  return new Promise((resolve, reject) => {
    _rmHandlers(client)

    client
      .once('connected', function () {
        const handleReconnection = err => {
          if (client._reconnecting) return

          if (err && LOG._error) {
            err.message = 'Client error: ' + err.message
            LOG.error(err)
          }
          if (keepAlive) {
            _rmHandlers(client)
            _connectUntilConnected(client, LOG, 0)
          }
        }

        _rmHandlers(client)
        client.once('error', handleReconnection)
        if (keepAlive) {
          client.once('disconnected', handleReconnection)
        }

        resolve(client)
      })
      .once('error', err => {
        _rmHandlers(client)
        const e = new Error('Connection error')
        e.cause = err
        reject(e)
      })

    client.connect()
  })
}

const disconnect = client => {
  return new Promise((resolve, reject) => {
    _rmHandlers(client)

    client.once('disconnected', () => {
      client.removeAllListeners('error')
      resolve()
    })
    client.once('error', err => {
      client.removeAllListeners('disconnected')
      reject(err)
    })

    client.disconnect()
  })
}

module.exports = {
  connect,
  disconnect
}
