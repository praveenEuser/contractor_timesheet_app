export = XsuaaSecurityContext;
/** @extends {SecurityContext<XsuaaService, XsuaaToken>} */
declare class XsuaaSecurityContext extends SecurityContext<import("../service/XsuaaService"), import("../token/XsuaaToken")> {
    /**
     * @param {XsuaaService|null} service
     * @param {XsuaaToken} token
     * @param {SecurityContextConfig} [contextConfig]
     */
    constructor(service: XsuaaService | null, token: XsuaaToken, contextConfig?: SecurityContextConfig);
    /**
     * Checks if the token of this context was issued for the given scope.
     * @param {String} scope
     * @returns {Boolean}
     */
    checkScope(scope: string): boolean;
    /**
     * Checks if the token of this context was issued for the given scope, ignoring the xsappname prefix of the service that was used to create this context when copmaring with the token's scopes.
     * @param {String} scope
     * @returns {Boolean}
     */
    checkLocalScope(scope: string): boolean;
    checkFollowingInstanceScope(scope: any): boolean;
    getAttributes(): any;
    getAttribute(name: any): any;
    getAdditionalAuthAttribute(name: any): any;
    getAdditionalAuthAttributes(): any;
    /**
     * @deprecated Use token.zid instead
     */
    getAppTID(): string;
    getClientId(): string;
    getCloneServiceInstanceId(): any;
    getEmail(): any;
    getFamilyName(): any;
    getGivenName(): any;
    getLogonName(): any;
    getOrigin(): any;
    getSubaccountId(): any;
    getSubdomain(): any;
    getUniquePrincipalName(origin: any, logonName: any): string;
    getUserName(): string;
    /**
     * @deprecated Use token.zid instead
     */
    getZoneId(): string;
    hasAttributes(): any;
    isInForeignMode(): boolean;
    #private;
}
declare namespace XsuaaSecurityContext {
    export { XsuaaToken, XsuaaService, SecurityContextConfig };
}
import SecurityContext = require("./SecurityContext");
type XsuaaToken = import("../token/XsuaaToken");
type XsuaaService = import("../service/XsuaaService");
type SecurityContextConfig = import("../util/Types").SecurityContextConfig;
//# sourceMappingURL=XsuaaSecurityContext.d.ts.map