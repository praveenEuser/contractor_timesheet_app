export = XssecPassportStrategy;
declare class XssecPassportStrategy {
    /**
     * @param {Token} token
     */
    static "__#22@#buildPassportUser"(token: Token): {
        id: any;
        name: {
            givenName: string;
            familyName: string;
        };
        emails: {
            value: string;
        }[];
    };
    /**
     * Creates a new XssecPassportStrategy that uses the provided service(s) to create security contexts for incoming requests.
     * @param {Service|Service[]} services
     * @param {string|Symbol} [reqProperty="securityContext"] the property (Default: "securityContext") on the req object where the SecurityContext is placed after authentication.
     */
    constructor(services: Service | Service[], reqProperty?: string | Symbol);
    /** @type {Service|Service[]} service(s) against which incoming JWTs are authenticated */
    services: Service | Service[];
    /** @type {string|Symbol} the property on the req object where the SecurityContext is placed after authentication. */
    reqProperty: string | Symbol;
    name: string;
    authenticate(req: any, passportOptions?: {}): Promise<any>;
}
declare namespace XssecPassportStrategy {
    export { Service, Token };
}
type Service = import("../service/Service");
type Token = import("../token/Token");
//# sourceMappingURL=XssecPassportStrategy.d.ts.map