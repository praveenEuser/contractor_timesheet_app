export = RequestError;
/**
 * An error that occurs while sending a request, e.g. when there is no network connection.
 */
declare class RequestError extends NetworkError {
    constructor(url: any, request: any, originalError: any, message?: string);
    set url(value: any);
    get url(): any;
    set request(value: import("http").RequestOptions & import("tls").SecureContextOptions & {
        checkServerIdentity?: ((hostname: string, cert: import("tls").DetailedPeerCertificate) => Error | undefined) | undefined;
        rejectUnauthorized?: boolean | undefined;
        servername?: string | undefined;
    } & {
        name: string;
    });
    get request(): import("http").RequestOptions & import("tls").SecureContextOptions & {
        checkServerIdentity?: ((hostname: string, cert: import("tls").DetailedPeerCertificate) => Error | undefined) | undefined;
        rejectUnauthorized?: boolean | undefined;
        servername?: string | undefined;
    } & {
        name: string;
    };
    set originalError(error: Error | Error[]);
    get originalError(): Error | Error[];
    #private;
}
import NetworkError = require("./NetworkError");
//# sourceMappingURL=RequestError.d.ts.map