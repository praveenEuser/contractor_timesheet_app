'use strict';

const serviceTokenHandler = require('./service-token-handler');

// if it is saas approuter flow use uniqueServiceName (<bs name>!<destination guid>), else use req.internalUrl.route.service (<bs name>)
const getServiceTag = (req) => req.destinationCredentials && req.destinationCredentials.uniqueServiceName && req.internalUrl.route.credentials && req.internalUrl.route.credentials.uniqueServiceName ? req.internalUrl.route.credentials.uniqueServiceName : req.internalUrl.route.service;

module.exports = async function (req, res, next) {
  if (!req.internalUrl || !req.internalUrl.route) {
    return next();
  }
  const serviceTag = getServiceTag(req);
  if (!serviceTag){
    return next();
  }
  serviceTokenHandler.attachHeadersFromCredentials(req, serviceTag);
  if (!serviceTokenHandler.isTokenExchangeRequired(req)) {
    return next();
  }

  try {
    const askForToken = await serviceTokenHandler.shouldAskBusinessToken(req, serviceTag);
    if (!askForToken) {
      return next();
    }
    const token = await serviceTokenHandler.replaceUserToken(req, null, serviceTag, false);
    if (process.env.NODE_ENV === 'development') {
      req.session.user = {};
    }
    await serviceTokenHandler.setTokenInUserSession(req, token, serviceTag);
    return next();
  } catch (err) {
    return next(err);
  }
};
