export = XsuaaToken;
declare class XsuaaToken extends Token {
    /**
     * @param {string|null} jwt
     * @param {object} [content] - optional parsed header and payload
     * @param {import('../util/Types').JwtHeader & { [key: string]: any }} [content.header] - parsed header
     * @param {import('../util/Types').JwtPayload & import('../util/Types').XsuaaJwtPayload & { [key: string]: any }} [content.payload] - parsed payload
     */
    constructor(jwt: string | null, { header, payload }?: {
        header?: import("../util/Types").JwtHeader & {
            [key: string]: any;
        };
        payload?: import("../util/Types").JwtPayload & import("../util/Types").XsuaaJwtPayload & {
            [key: string]: any;
        };
    });
    get azAttributes(): any;
    get extAttributes(): any;
    get logonName(): string;
    /**
     * @returns {string[]} the scopes of the token
     */
    get scopes(): string[];
    get serviceInstanceId(): any;
    get subAccountId(): any;
    get xsUserAttributes(): any;
    get xsSystemAttributes(): any;
    /**
     * @returns {string} The zone id of the token.
     */
    get zid(): string;
    getXsUserAttribute(name: any): any;
    getAppTID(): string;
    getCustomIssuer(): string;
    getZoneId(): string;
}
import Token = require("./Token");
//# sourceMappingURL=XsuaaToken.d.ts.map