export = IdentityServiceToken;
declare class IdentityServiceToken extends Token {
    /**
     * @param {string|null} jwt
     * @param {object} [content] - optional parsed header and payload
     * @param {import('../util/Types').JwtHeader & { [key: string]: any }} [content.header] - parsed header
     * @param {import('../util/Types').JwtPayload & import('../util/Types').IdentityServiceJwtPayload & { [key: string]: any }} [content.payload] - parsed payload
     */
    constructor(jwt: string | null, { header, payload }?: {
        header?: import("../util/Types").JwtHeader & {
            [key: string]: any;
        };
        payload?: import("../util/Types").JwtPayload & import("../util/Types").IdentityServiceJwtPayload & {
            [key: string]: any;
        };
    });
    /**
     * @returns {string} The ID of the caller's tenant within the SAP Cloud Identity Service application for which the token was fetched.
     */
    get appTid(): string;
    /**
     * Returns the SAP Cloud Identity Service APIs consumed by the caller (based on the token's 'ias_apis' claim).
     * @returns {string[]} The consumed APIs or [] if the caller does not consume any APIs.
     */
    get consumedApis(): string[];
    get customIssuer(): string;
    /**
     * Returns the SCIM id of the user.
     * @returns {string} The SCIM id or undefined if the token does not contain a SCIM id, e.g. because it is a technical user token.
     */
    get scimId(): string;
    getAppTID(): string;
    getCustomIssuer(): string;
    /**
     * @deprecated Access appTid instead
     */
    getZoneId(): string;
}
import Token = require("./Token");
//# sourceMappingURL=IdentityServiceToken.d.ts.map