import {
  Method,
  sendRequest,
  verifyDefaultLandscape,
} from "../utils/devspace-utils";
import { getTenantMetadata } from "./get-devspace";
import { isAppStudio } from "./is-app-studio";
import { compact, join, split } from "lodash";
import type { ResponseType } from "axios";

/**
 * This function can only be used from within the vscode extension context
 */
export async function sendAiRequest(request: {
  path: string;
  method: string;
  config?: {
    data?: unknown;
    headers?: Record<string, string>;
    responseType?: ResponseType;
  } & Record<string, unknown>;
}): Promise<unknown> {
  let domain: string;
  let proxy = "";
  let jwt: string | undefined;

  if (!(await isAppStudio())) {
    // Non-BAS: use llm proxy and JWT
    const {
      jwt: token,
      landscape,
      iasjwt: iasToken,
    } = await verifyDefaultLandscape();
    const { host } = await getTenantMetadata({ landscape, jwt: token });
    domain = `https://${host}`;
    proxy = "secure-outbound-connectivity";
    jwt = token;
    if (iasToken) {
      request.config ??= {};
      request.config.headers = {
        ...request.config.headers,
        "ias-authorization": iasToken,
      };
    }
  } else {
    // BAS: use H2O
    domain = process.env.H2O_URL ?? "";
  }

  const path = join(compact(split(`${proxy}/llm/${request.path}`, "/")), "/");

  return sendRequest({
    config: {
      ...request.config,
      headers: {
        ...request.config?.headers,
        "AI-Resource-Group":
          request.config?.headers?.["AI-Resource-Group"] ?? "default",
      },
    },
    url: { domain, path },
    jwt,
    method: request.method as Method,
  });
}
