"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendAiRequest = void 0;
const devspace_utils_1 = require("../utils/devspace-utils");
const get_devspace_1 = require("./get-devspace");
const is_app_studio_1 = require("./is-app-studio");
const lodash_1 = require("lodash");
/**
 * This function can only be used from within the vscode extension context
 */
async function sendAiRequest(request) {
    var _a, _b, _c, _d, _e, _f;
    let domain;
    let proxy = "";
    let jwt;
    if (!(await (0, is_app_studio_1.isAppStudio)())) {
        // Non-BAS: use llm proxy and JWT
        const { jwt: token, landscape, iasjwt: iasToken, } = await (0, devspace_utils_1.verifyDefaultLandscape)();
        const { host } = await (0, get_devspace_1.getTenantMetadata)({ landscape, jwt: token });
        domain = `https://${host}`;
        proxy = "secure-outbound-connectivity";
        jwt = token;
        if (iasToken) {
            (_a = request.config) !== null && _a !== void 0 ? _a : (request.config = {});
            request.config.headers = Object.assign(Object.assign({}, request.config.headers), { "ias-authorization": iasToken });
        }
    }
    else {
        // BAS: use H2O
        domain = (_b = process.env.H2O_URL) !== null && _b !== void 0 ? _b : "";
    }
    const path = (0, lodash_1.join)((0, lodash_1.compact)((0, lodash_1.split)(`${proxy}/llm/${request.path}`, "/")), "/");
    return (0, devspace_utils_1.sendRequest)({
        config: Object.assign(Object.assign({}, request.config), { headers: Object.assign(Object.assign({}, (_c = request.config) === null || _c === void 0 ? void 0 : _c.headers), { "AI-Resource-Group": (_f = (_e = (_d = request.config) === null || _d === void 0 ? void 0 : _d.headers) === null || _e === void 0 ? void 0 : _e["AI-Resource-Group"]) !== null && _f !== void 0 ? _f : "default" }) }),
        url: { domain, path },
        jwt,
        method: request.method,
    });
}
exports.sendAiRequest = sendAiRequest;
//# sourceMappingURL=ai.js.map